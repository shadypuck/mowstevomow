<?php

/**
 * Implementation of hook_menu()
 *
 */
function statsd_menu() {

  $items['admin/config/development/statsd'] = array(
    'title'            => 'StatsD',
    'description'      => 'Settings for statsd logging. StatsD is a Node JS daemon that aggregates statistics for visibility in Graphite. Best suited for compiling arbitrary statistics on various developer implemented metrics, this module can also be used to send all system events (via watchdog calls) to Graphite.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('statsd_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;

}


/**
 * Page callback for StatsD administrative settings.
 *
 */
function statsd_admin_settings() {

  $form['statsd_host'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Host'),
    '#size'          => 25,
    '#description'   => t('The hostname, or IP address of the StatsD daemon. To minimize latency issue, use an IP whenever possible.'),
    '#default_value' => variable_get('statsd_host', '127.0.0.1'),
  );
  $form['statsd_port'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Port'),
    '#size'          => 5,
    '#description'   => t('The port of the StatsD daemon'),
    '#default_value' => variable_get('statsd_port', '8125'),
  );
  $form['statsd_sample_rate'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Sample Rate'),
    '#size'          => 2,
    '#description'   => t('StatsD can send a subset of events to Graphite. Choose a lower sample rate if you want to reduce the number of events being sent. Sample rates are between 0 and 1 (e.g. 0.1 implies 10% of events will be logged)'),
    '#default_value' => variable_get('statsd_sample_rate', 1),
  );
  $form['statsd_user_events'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Send User Events'),
    '#description'   => t('Enabling this feature will capture a count of user events in the following categories: active sessions, successful logins, failed logins, password resets'),
    '#default_value' => variable_get('statsd_user_events', TRUE),
  );
  $form['statsd_watchdog'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Use Watchdog'),
    '#description'   => t('Enabling this feature will capture a count of the severity and type of errors passed through watchdog. Alternatively, it may be less spammy to use the built-in StatsD client to only record events your application cares about.'),
    '#default_value' => variable_get('statsd_watchdog', TRUE),
  );
  $form['statsd_watchdog_level'] = array(
    '#type'          => 'select',
    '#title'         => t('Log Level'),
    '#description'   => t('If watchdog logging is enabled, only send data to StatsD within or above the selected threshold'),
    '#options'       => watchdog_severity_levels(),
    '#default_value' => variable_get('statsd_watchdog_level', WATCHDOG_WARNING),
  );
  $form['statsd_prefix'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Prefix'),
    '#size'          => 15,
    '#description'   => t('Use a prefix if you need to separate similar events (such as on different web servers). This prefix is added for calls (if enabled), as well as any calls via the built-in StatsD client. Do not include the period at the end of the prefix (e.g. use "myprefix" instead of "myprefix."'),
    '#default_value' => variable_get('statsd_prefix', NULL),
  );
  $form['statsd_suffix'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Suffix'),
    '#size'          => 15,
    '#description'   => t('Use a suffix if you need to separate similar events (such as on different web servers). This suffix is added for calls (if enabled), as well as any calls via the built-in StatsD client. Do not include the period at the beginning of the suffix (e.g. use "mysuffix" instead of "mysuffix."'),
    '#default_value' => variable_get('statsd_suffix', NULL),
  );

  return system_settings_form($form);

}


/**
 * Validation handler for the administrative settings.
 *
 */
function statsd_admin_settings_validate($form, &$form_state) {

  $form_state['values']['statsd_host']        = trim($form_state['values']['statsd_host']);
  $form_state['values']['statsd_port']        = trim($form_state['values']['statsd_port']);
  $form_state['values']['statsd_sample_rate'] = trim($form_state['values']['statsd_sample_rate']);
  $form_state['values']['statsd_prefix']      = trim(rtrim($form_state['values']['statsd_prefix'], '.') );
  $form_state['values']['statsd_suffix']      = trim(ltrim($form_state['values']['statsd_suffix'], '.') );

  $sample_rate = $form_state['values']['statsd_sample_rate'];

  if (!is_numeric($sample_rate) || $sample_rate <= 0 || $sample_rate > 1) {
    form_set_error('statsd_sample_rate', t('The sample rate must be a value between 0 and 1') );
  }

}


/**
 * The generic statsd wrapper. Used for convenience.
 *
 * @param $name
 *   Name of the value you want to track.
 * @param $type
 *   The type of action you want to take with the value.
 * @param $value
 *   The numeric value you wish to pass to statsd.
 *
 */
function statsd_call($name, $type = 'increment', $value = NULL) {
  if (!isset($name)) {
    return;
  }

  switch ($type) {
    case 'increment':
        StatsD::updateStats($name);
      break;
    case 'decrement':
        StatsD::updateStats($name, isset($value) ? $value : -1);
      break;
    case 'gauge':
        StatsD::gauge($name, $value);
      break;
    case 'timing':
        StatsD::timing($name, $value);
      break;
    default:
        watchdog('statsd', 'Unknown method called for statsd - ' . $type, array(), WATCHDOG_WARNING);
      break;
  }
}

/**
 * Implementation of hook_user_login()
 *
 */
function statsd_user_login(&$edit, $account) {

  if (!variable_get('statsd_user_events', TRUE)) {
    return;
  }

  statsd_call('user_events.successful_login');

}

/**
 * Send failed login attempt
 *
 */
function statsd_user_login_failed($account) {

  if (!variable_get('statsd_user_events', TRUE)) {
    return;
  }

  statsd_call('user_events.failed_login');

}


/**
 * Implementation of hook_exit()
 *
 */
function statsd_exit($destination = NULL) {

  if (!variable_get('statsd_user_events', TRUE)) {
    return;
  }

  $active_sessions = db_query("SELECT count(*) as num FROM {sessions} WHERE timestamp > UNIX_TIMESTAMP() - 3600")->fetchField();
  statsd_call('user_events.active_sessions', 'gauge', $active_sessions);
  statsd_call('user_events.page_view');

}

/**
 * Implementation of hook_watchdog()
 *
 */
function statsd_watchdog($entry) {

  if (variable_get('statsd_user_events', TRUE) && strstr($entry['message'], 'Login attempt failed for')) {
    statsd_user_login_failed($entry['user']);
  }

  $enabled      = variable_get('statsd_watchdog', TRUE);
  $level        = variable_get('statsd_watchdog_level', WATCHDOG_WARNING);

  if (!$enabled || $level < $entry['severity']) {
    return;
  }

  $levels = watchdog_severity_levels();
  $data   = array(
    sprintf('watchdog.type.%s', $entry['type']),
    sprintf('watchdog.severity.%s', $levels[$entry['severity']]),
  );

  statsd_call($data);

}
