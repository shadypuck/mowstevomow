<?php

/**
 * @file
 * Automated tests for the Taxonomy Access Control Simplified UI module.
 */

/**
 * Provides a base test class and helper methods for automated tests.
 *
 * TaxonomyAccessTestCase is a more fitting base than TaxonomyWebTestCase for creating
 * custom vocabularies for taxonomy access testing.
 */
class TaxonomyAccessSimpleUITestCase extends TaxonomyAccessTestCase {

  /**
   * Creates a taxonomy field and adds it to a content type.
   *
   * Mainly a copy of TaxonomyAccessTestCase::createField, but accepts also a content type.
   *
   * @param string $machine_name
   *   The machine name of the vocabulary to use.
   * @param string $widget
   *   (optional) The name of the widget to use.  Defaults to 'options_select'.
   * @param int $count
   *   (optional) The allowed number of values.  Defaults to unlimited.
   * @param $content_type
   *   (optional) The node type to apply this term_reference field to. Defaults to page.
   *
   * @return array
   *   Array of instance data.
   */
  function createField($machine_name, $widget = 'options_select', $count = FIELD_CARDINALITY_UNLIMITED, $content_type = 'page') {
    $field = array(
      'field_name' => $machine_name . '_' . $content_type,
      'type' => 'taxonomy_term_reference',
      'cardinality' => $count,
      'settings' => array(
        'allowed_values' => array(
          array(
            'vocabulary' => $machine_name,
            'parent' => 0,
          ),
        ),
      ),
    );
    $field = field_create_field($field);

    $instance = array(
      'field_name' => $machine_name . '_' . $content_type,
      'bundle' => $content_type,
      'entity_type' => 'node',
      'widget' => array(
        'type' => $widget,
      ),
      'display' => array(
        'default' => array(
          'type' => 'taxonomy_term_reference_link',
        ),
      ),
    );

    return field_create_instance($instance);
  }

  /**
   * Asserts that the TAC checkbox on a vocabulary page is enabled and checked.
   *
   * @param $vocabulary_name
   *   The human-readable name of a vocabulary to use in the assertion message.
   */
  function assertVocabularyAccessControlCheckboxEnabledAndChecked($vocabulary_name) {
    $message = t('TAC access control checkbox is enabled and checked for the "@vocabulary" vocabulary.', array('@vocabulary' => $vocabulary_name));
    $checkbox = $this->xpath('//input[@type="checkbox" and @name="tac_enable" and not(@disabled) and @checked="checked"]');
    $this->assertTrue(!empty($checkbox), $message);
  }

  /**
   * Asserts that the TAC checkbox on a vocabulary page is enabled and unchecked.
   *
   * @param $vocabulary_name
   *   The human-readable name of a vocabulary to use in the assertion message.
   */
  function assertVocabularyAccessControlCheckboxEnabledAndUnchecked($vocabulary_name) {
    $message = t('TAC access control checkbox is enabled and unchecked for the "@vocabulary" vocabulary.', array('@vocabulary' => $vocabulary_name));
    $checkbox = $this->xpath('//input[@type="checkbox" and @name="tac_enable" and not(@disabled) and not(@checked)]');
    $this->assertTrue(!empty($checkbox), $message);
  }

  /**
   * Asserts that the TAC checkbox on a vocabulary page is disabled and unchecked.
   *
   * @param $vocabulary_name
   *   The human-readable name of a vocabulary to use in the assertion message.
   */
  function assertVocabularyAccessControlCheckboxDisabledAndUnchecked($vocabulary_name) {
    $message = t('TAC access control checkbox is disabled and unchecked for the "@vocabulary" vocabulary.', array('@vocabulary' => $vocabulary_name));
    $checkbox = $this->xpath('//input[@type="checkbox" and @name="tac_enable" and @disabled="disabled" and not(@checked)]');
    $this->assertTrue(!empty($checkbox), $message);
  }
}

class TaxonomyAccessSimpleUITest extends TaxonomyAccessSimpleUITestCase {
  protected $vocabularies = array();
  protected $instances = array();

  public static function getInfo() {
    return array(
      'name' => 'Simple UI',
      'description' => 'Test the TAC simple UI.',
      'group' => 'Taxonomy Access Control',
    );
  }

  public function setUp() {
    // Enable module and dependencies.  Note: PHP grandparent issue.
    DrupalWebTestCase::setUp('taxonomy_access', 'tac_alt_ui');

    // Setup: Create vocabs A and B (to be TAC-enabled later) and regular vocab
    // C; add vocabs A and C to articles, and B and C to basic pages.
    $this->vocabularies['a'] = $this->createVocab('testa');
    $this->vocabularies['b'] = $this->createVocab('testb');
    $this->vocabularies['c'] =  $this->createVocab('testc');
    $this->instances['article_a'] = $this->createField($this->vocabularies['a']->machine_name, 'options_select', 1, 'article');
    $this->instances['page_b'] = $this->createField($this->vocabularies['b']->machine_name, 'options_select', 1, 'page');
    $this->instances['article_c'] = $this->createField($this->vocabularies['c']->machine_name, 'options_select', 1, 'article');
    $this->instances['page_c'] = $this->createField($this->vocabularies['c']->machine_name, 'options_select', 1, 'page');
  }

  /**
   * Remove our custom vocabularies and fields between tests.
   */
  public function tearDown() {
    $this->vocabularies = array();
    $this->instances = array();
    DrupalWebTestCase::tearDown();
  }

  /**
   * Tests the TAC-enable checkbox behavior on vocabularies.
   */
  public function testVocabEnableCheckbox() {
    $admin = $this->drupalCreateUser(array('administer taxonomy'));
    $this->drupalLogin($admin);

    // Enable TAC on vocaulary A.
    $this->drupalGet('admin/structure/taxonomy/testa/edit');
    $this->assertVocabularyAccessControlCheckboxEnabledAndUnchecked('Vocabulary A');
    $this->drupalPost('admin/structure/taxonomy/testa/edit', array('tac_enable' => TRUE), t('Save'));
    // Note: not using clickLink because of unpredictable numbers of links with
    // the same label.  Theoretically the indexes stay the same, but it seems like
    // unneccessary complication for this test.
    $this->drupalGet('admin/structure/taxonomy/testa/edit');
    $this->assertVocabularyAccessControlCheckboxEnabledAndChecked('Vocabulary A');

    // Enable TAC on vocabulary B.
    $this->drupalGet('admin/structure/taxonomy/testb/edit');
    $this->assertVocabularyAccessControlCheckboxEnabledAndUnchecked('Vocabulary B');
    $this->drupalPost('admin/structure/taxonomy/testb/edit', array('tac_enable' => TRUE), t('Save'));
    $this->drupalGet('admin/structure/taxonomy/testb/edit');
    $this->assertVocabularyAccessControlCheckboxEnabledAndChecked('Vocabulary B');

    // Check that no TAC-enable checkbox is shown for vocabulary C.
    $this->drupalGet('admin/structure/taxonomy/testc/edit');
    $this->assertVocabularyAccessControlCheckboxDisabledAndUnchecked('Vocabulary C');
  }

  /**
   * Tests behavior when simple UI requirements are not met.
   */
  public function testAltUICardinality() {
    $admin = $this->drupalCreateUser(array('administer taxonomy'));
    $this->drupalLogin($admin);

    // "Before" check.
    $this->drupalGet('admin/structure/taxonomy/testa/edit');
    $this->assertVocabularyAccessControlCheckboxEnabledAndUnchecked('Vocabulary A');

    // Disable the module and change the cardinality so as to violate the
    // simple UI requirements.
    module_disable(array('tac_alt_ui'));
    $field = field_info_field($this->instances['article_a']['field_name']);
    $field['cardinality'] = FIELD_CARDINALITY_UNLIMITED;
    field_update_field($field);
    // Just to double-check.
    $field = field_info_field($this->instances['article_a']['field_name']);
    $this->assertEqual($field['cardinality'], FIELD_CARDINALITY_UNLIMITED, "Successfully changed vocabulary A field cardinality to unlimited.");

    // Re-enable the module and check that the TAC-enable checkbox is no longer
    // shown for vocabulary A.
    module_enable(array('tac_alt_ui'));
    $this->drupalGet('admin/structure/taxonomy/testa/edit');
    $this->assertVocabularyAccessControlCheckboxDisabledAndUnchecked('Vocabulary A');
  }

  /**
   * Tests behavior when simple UI requirements are not met.
   */
  public function testAltUITypes() {
    $admin = $this->drupalCreateUser(array('administer taxonomy', 'administer permissions'));
    $this->drupalLogin($admin);

    // Enable TAC on vocabulary A.
    $this->drupalGet('admin/structure/taxonomy/testa/edit');
    $this->assertVocabularyAccessControlCheckboxEnabledAndUnchecked('Vocabulary A');
    $this->drupalPost('admin/structure/taxonomy/testa/edit', array('tac_enable' => TRUE), t('Save'));
    $this->drupalGet('admin/structure/taxonomy/testa/edit');
    $this->assertVocabularyAccessControlCheckboxEnabledAndChecked('Vocabulary A');

    // Enable TAC on vocabulary B.
    $this->drupalGet('admin/structure/taxonomy/testb/edit');
    $this->assertVocabularyAccessControlCheckboxEnabledAndUnchecked('Vocabulary B');
    $this->drupalPost('admin/structure/taxonomy/testb/edit', array('tac_enable' => TRUE), t('Save'));
    $this->drupalGet('admin/structure/taxonomy/testb/edit');
    $this->assertVocabularyAccessControlCheckboxEnabledAndChecked('Vocabulary B');

    // Add some terms to vocab B, no hierarchy (but run the hierarchy check to
    // double-check behaviour when the hierarchy property is correctly set).
    $vocab = $this->vocabularies['b'];
    $term_1 = $this->createTerm($this->randomName(), $vocab);
    taxonomy_check_vocabulary_hierarchy($vocab, (array) $term_1);
    $term_2 = $this->createTerm($this->randomName(), $vocab);
    taxonomy_check_vocabulary_hierarchy($vocab, (array) $term_2);

    // "Before" check.  Checks a term for the permissions matrix.
    $this->drupalGet('admin/structure/taxonomy/testb');
    $this->clickLink('edit', 0);
    $this->assertTrue($this->xpath('//table[@id="permissions"]'), t('TAC alt UI permissions matrix shows.'));

    /**
     * TODO: Rewrite this section of the test; it's testing the wrong thing.
     * See tac_alt_ui_get_eligibility_status() (Criterion 2) for the condition
     * that should be tested.

    $instance = array(
      'field_name' => 'testb_page',
      'bundle' => 'article',
      'entity_type' => 'node',
      'widget' => array(
        'type' => 'options_select',
      ),
      'display' => array(
        'default' => array(
          'type' => 'taxonomy_term_reference_link',
        ),
      ),
    );
    $this->instances['article_b'] = field_create_instance($instance);
   // $this->instances['article_b'] = $this->createField($this->vocabularies['b']->machine_name, 'options_select', 1, 'article');

    module_disable(array('tac_alt_ui'));
    module_enable(array('tac_alt_ui'));

    // @TODO - fails
    // Check that no permissions matrix is shown for vocabulary B terms.
    $this->drupalGet('admin/structure/taxonomy/testb');
    $this->clickLink('edit', 0);
    $this->assertFalse($this->xpath('//table[@id="permissions"]'), t('Permissions matrix is no longer shown on terms from a vocabulary applied to more than one node type.'));

    */
  }

  /**
   * Tests behavior when simple UI requirements are not met.
   */
  public function testAltUIHierarchy() {
    $admin = $this->drupalCreateUser(array('administer taxonomy'));
    $this->drupalLogin($admin);

    // "Before" check.
    $this->drupalGet('admin/structure/taxonomy/testa/edit');
    $this->assertVocabularyAccessControlCheckboxEnabledAndUnchecked('Vocabulary A');

    // Disable the module and make vocabulary A hierarchical so that it no
    // longer qualifies for tac_alt_ui.
    module_disable(array('tac_alt_ui'));
    $vocab = $this->vocabularies['a'];
    $parent = $this->createTerm($this->randomName(), $vocab);
    taxonomy_check_vocabulary_hierarchy($vocab, (array) $parent);
    $child = $this->createTerm($this->randomName(), $vocab, $parent->tid);
    taxonomy_check_vocabulary_hierarchy($vocab, (array) $child);

    // Re-enable the module and check that no TAC-enable checkbox is shown for
    // vocabulary A.
    module_enable(array('tac_alt_ui'));
    $this->drupalGet('admin/structure/taxonomy/testa/edit');
    $this->assertVocabularyAccessControlCheckboxDisabledAndUnchecked('Vocabulary A');
  }
}
