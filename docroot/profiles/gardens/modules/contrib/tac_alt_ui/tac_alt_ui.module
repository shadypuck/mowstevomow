<?php

/**
 * @file
 * A simplified UI for the taxonomy access control module.
 */

/**
 * Implements hook_user_role_insert().
 */
function tac_alt_ui_user_role_insert($role) {
  taxonomy_access_enable_role($role->rid);
  // Add the new role to all enabled vocabularies.
  $enabled_vocabs = tac_alt_ui_get_enabled_vocabs();
  foreach ($enabled_vocabs as $machine_name) {
    $vocabulary = taxonomy_vocabulary_machine_name_load($machine_name);
    taxonomy_access_enable_vocab($vocabulary->vid, $role->rid);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tac_alt_ui_form_taxonomy_form_vocabulary_alter(&$form, &$form_state) {
  // Add a checkbox to toggle whether this vocabulary is TAC-enabled.
  form_load_include($form_state, 'inc', 'tac_alt_ui', 'tac_alt_ui.admin');
  _tac_alt_ui_form_taxonomy_form_vocabulary_alter($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tac_alt_ui_form_taxonomy_form_term_alter(&$form, &$form_state) {
  if (tac_alt_ui_enabled()) {
    $enabled_vocabs = tac_alt_ui_get_enabled_vocabs();
    if (user_access('administer permissions') && isset($form['#vocabulary']->machine_name) && in_array($form['#vocabulary']->machine_name, $enabled_vocabs)) {
      // Injects the Permissions settings on the Edit term form.
      form_load_include($form_state, 'inc', 'tac_alt_ui', 'tac_alt_ui.admin');
      _tac_alt_ui_form_taxonomy_form_term_alter($form, $form_state);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tac_alt_ui_form_taxonomy_overview_vocabularies_alter(&$form, &$form_state) {
  // On the overview list of vocabularies, mark TAC-enabled vocabularies as
  // being used for access control.
  form_load_include($form_state, 'inc', 'tac_alt_ui', 'tac_alt_ui.admin');
  _tac_alt_ui_form_taxonomy_overview_vocabularies_alter($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tac_alt_ui_form_taxonomy_overview_terms_alter(&$form, &$form_state) {
  $enabled_vocabs = tac_alt_ui_get_enabled_vocabs();
  if (in_array($form['#vocabulary']->machine_name, $enabled_vocabs)) {
    // Force any TAC-enabled vocabulary to stay flat.
    $form['#parent_fields'] = FALSE;
  }
}

/**
 * Implements hook_menu_alter().
 */
function tac_alt_ui_menu_alter(&$items) {
  if (tac_alt_ui_enabled()) {
    // If the simple UI is enabled, forward all administrative paths to the
    // main taxonomy list page. If the simple UI is not enabled, leave them alone.
    $admin_callback = array(
      'title' => 'Taxonomy access control',
      'description' => 'Taxonomy-based access control for content',
      'page callback' => 'tac_alt_ui_admin_redirect',
      'access callback' => TRUE, // The term list page has its own access control.
      'module' => 'tac_alt_ui',
    );
    $paths = array(
      TAXONOMY_ACCESS_CONFIG,
      TAXONOMY_ACCESS_CONFIG . '/role',
      TAXONOMY_ACCESS_CONFIG . '/role/%/edit',
      TAXONOMY_ACCESS_CONFIG . '/role/%/delete',
    );
    foreach ($paths as $path) {
      $type = isset($items[$path]['type']) ? $items[$path]['type'] : MENU_NORMAL_ITEM;
      $items[$path] = $admin_callback;
      // Hide from menu trees such as the admin/config page.
      $items[$path]['type'] = $type & ~MENU_VISIBLE_IN_TREE;
    }
  }

  // On the vocabulary overview page, customize the page title for vocabularies
  // using access control.
  $items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name']['title callback'] = 'tac_alt_ui_admin_vocabulary_title_callback';
  $items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name']['title arguments'] = array(3);
}

/**
 * Title callback: Return the page/link title for a vocabular page.
 */
function tac_alt_ui_admin_vocabulary_title_callback($vocabulary) {
  $title = taxonomy_admin_vocabulary_title_callback($vocabulary);
  // Append "(access control enabled)" only for the page title on the term
  // listing page, not the Edit or Field UI pages or links from other pages.
  if (($_GET['q'] == 'admin/structure/taxonomy/' . $vocabulary->machine_name) && in_array($vocabulary->machine_name, tac_alt_ui_get_enabled_vocabs())) {
    $title .= ' ' . t('(access control enabled)');
  }
  return $title;
}

/**
 * Page callback: Redirect all admin pages to the vocabulary list page.
 */
function tac_alt_ui_admin_redirect() {
  // Double-check that the simple UI is enabled.
  if (tac_alt_ui_enabled()) {
    drupal_goto('admin/structure/taxonomy');
  }
  // If the site failed the simple UI check, that means it qualified for the
  // simple UI at the last menu rebuild, but it no longer qualifies. Rebuild
  // the menu and try the request again.
  else {
    variable_set('menu_rebuild_needed', TRUE);
    drupal_goto(current_path());
  }
}

/**
 * Implements hook_node_type_update().
 */
function tac_alt_ui_node_type_update($info) {
  // Whenever a node type is updated, the field instance data may have changed.
  // We need to recalculate whether the simple UI is applicable.
  cache_clear_all('tac_alt_ui_enabled', 'cache');
}

/**
 * Implements hook_taxonomy_vocabulary_update().
 */
function tac_alt_ui_taxonomy_vocabulary_update($vocabulary) {
  // Whenever a vocabulary is updated, its hierarchy status may have changed.
  // We need to recalculate whether the simple UI is applicable.
  cache_clear_all('tac_alt_ui_enabled', 'cache');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tac_alt_ui_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  form_load_include($form_state, 'inc', 'tac_alt_ui', 'tac_alt_ui.admin');
  _tac_alt_ui_form_field_ui_field_edit_form_alter($form, $form_state);
}

/**
 * Implements hook_field_update_forbid().
 *
 * Prevent field updates that would change a term reference field in such a
 * way that the simple UI could no longer be used.
 */
function tac_alt_ui_field_update_forbid($field, $prior_field, $has_data) {
  // Forbid field updates that would change a term reference field in such a
  // way that the simple UI could no longer be used.
  $enabled_vocabs = tac_alt_ui_get_enabled_vocabs();
  if ($field['type'] == 'taxonomy_term_reference') {
    // Check to see if it's one of our vocabularies.
    $allowed_values = $field['settings']['allowed_values'];
    if (count($allowed_values) > 1) {
      // Disallow multiple vocabularies if any of them are TAC-enabled.
      foreach ($allowed_values as $index => $settings) {
        if (in_array($settings['vocabulary'], $enabled_vocabs)) {
          throw new FieldUpdateForbiddenException("Only one access control vocabulary is allowed.");
        }
      }
    }
    $settings = $allowed_values[0];
    if (in_array($settings['vocabulary'], $enabled_vocabs)) {
      // This is a single-vocabulary term reference field referring to a TAC-
      // enabled vocabulary. Make sure it can only refer to a single term.
      if (intval($field['cardinality']) !== 1) {
        throw new FieldUpdateForbiddenException("This vocabulary is being used for access control, so the field cannot contain more than one term");
      }
      // Check to see if any node types with this field attached already have
      // other fields using any access control vocabulary.
      $instance_data = tac_alt_ui_get_term_reference_field_instances($enabled_vocabs);
      foreach ($instance_data as $node_type => $instances) {
        if (in_array($node_type, $field['bundles']['node'])) {
          foreach ($instances as $field_name => $instance) {
            if ($field_name == $field['field_name']) {
              continue;
            }
            // Forbid two fields with the same access control vocabulary.
            if ($instance['vocabulary'] == $settings['vocabulary']) {
              throw new FieldUpdateForbiddenException("The " . $node_type . " content type already has a field using the " . $settings['vocabulary'] . " vocabulary");
            }
            // Forbid two fields with any access control vocabulary.
            if (in_array($instance['vocabulary'], $enabled_vocabs)) {
              throw new FieldUpdateForbiddenException("The " . $node_type . " content type already has a field using an access control vocabulary");
            }
          }
        }
      }
    }
  }
}

/**
 * Determines whether it is safe to use the alternative simple UI.
 *
 * @param $reset
 *   TRUE to reset the cache and recalculate the value; FALSE (default) to load
 *   the value from cache.
 * @return
 *   TRUE if the alternative UI can safely be used; FALSE otherwise.
 */
function tac_alt_ui_enabled($reset = FALSE) {
  $cache = cache_get('tac_alt_ui_enabled');
  if ($reset || ($cache === FALSE)) {
    $enabled = _tac_alt_ui_enabled();
    cache_set('tac_alt_ui_enabled', $enabled);
  }
  else {
    $enabled = $cache->data;
  }
  return $enabled;
}

/**
 * Helper function: Calculate whether the simple UI should be used or not.
 */
function _tac_alt_ui_enabled() {
  // List all vocabularies that are enabled for TAC.
  $enabled_vocabs = tac_alt_ui_get_enabled_vocabs();
  if (count($enabled_vocabs) === 0) {
    // The simplified UI won't do much with no TAC-enabled vocabs, but it's
    // safe to have it on.
    return TRUE;
  }
  // Check all term reference field instances for TAC-enabled vocabs.
  $instance_data = tac_alt_ui_get_term_reference_field_instances($enabled_vocabs);
  foreach ($instance_data as $node_type => $instances) {
    // If any node type has more than one term reference field for TAC-enabled
    // vocabularies, the simple UI won't work.
    if (count($instances) > 1) {
      return FALSE;
    }
    foreach ($instances as $field_name => $instance) {
      // If the content type has a term reference field for a TAC-enabled
      // vocabulary, and the field allows more than one term to be applied
      // to the node, the simple UI can't be used.
      if ($instance['cardinality'] != 1) {
        return FALSE;
      }
    }
  }
  return TRUE;
}

/**
 * Returns a vocabulary's TAC eligibility status.
 *
 * @param $vocabulary
 *   The vocabulary object to check for eligibility.
 *
 * @return mixed
 *   A string explaining why the vocabulary is ineligible for TAC under the
 *   simplified UI, or TRUE if the vocabulary is in fact eligible.
 */
function tac_alt_ui_get_eligibility_status($vocabulary) {
  // Criterion 1: The vocabulary must be flat (unless it's the built-in forum
  // vocabulary).
  if (intval($vocabulary->hierarchy) !== 0 && $vocabulary->vid !== variable_get('forum_nav_vocabulary', FALSE)) {
    return t('The %vocabulary_name vocabulary has parent-child relationships.', array('%vocabulary_name' => $vocabulary->name));
  }

  // Assemble a list of all TAC-enabled vocabularies, and add this new
  // vocabulary to the list.
  $vocabs = tac_alt_ui_get_enabled_vocabs();
  $vocabs[] = $vocabulary->machine_name;
  // Assemble a list of all relevant term reference fields.
  $instance_data = tac_alt_ui_get_term_reference_field_instances($vocabs);

  // Criterion 2: No content type may have more than one term reference field
  // referring to a potential TAC vocabulary (including the one we're checking
  // for eligibility).
  foreach ($instance_data as $node_type => $instances) {
    if (count($instances) > 1) {
      return t('The %content_type content type cannot have two access control vocabularies.', array('%content_type' => $node_type));
    }
    // Criterion 3: No term reference field for the vocabulary we're checking
    // for eligibility may have multiple cardinality.
    foreach ($instances as $field_name => $instance) {
      if ($instance['vocabulary'] == $vocabulary->machine_name && intval($instance['cardinality']) !== 1) {
        return t('On the %content_type content type (and possibly others) there is a %vocabulary field that allows more than one value.', array('%content_type' => $node_type, '%vocabulary' => $vocabulary->name));
      }
    }
  }
  return TRUE;
}

/**
 * Determines whether a vocabulary can safely be enabled for TAC.
 *
 * @param $vocabulary
 *   The vocabulary object to check for eligibility.
 *
 * @return
 *   TRUE if the vocabulary is eligible, FALSE otherwise.
 */
function tac_alt_ui_vocabulary_is_eligible($vocabulary) {
  $status = tac_alt_ui_get_eligibility_status($vocabulary);
  return ($status === TRUE);
}

/**
 * Returns term reference field instances corresponding to TAC-enabled vocabs.
 *
 * @param $vocabs
 *   An array of vocabulary machine names.
 * @return
 *   An associative array of field instances, keyed by node type and field name,
 *   with each instance having two additional keys:
 *   - vocabulary: the machine name of the vocabulary
 *   - cardinality: the field cardinality
 */
function tac_alt_ui_get_term_reference_field_instances($vocabs) {
  $return = array();
  $field_data = field_info_fields();
  $instance_data = field_info_instances('node');
  foreach ($instance_data as $node_type => $instances) {
    // Check all field instances on this content type, to see if they're
    // term reference fields.
    foreach ($instances as $field_name => $instance) {
      $field = $field_data[$field_name];
      if ($field['type'] == 'taxonomy_term_reference') {
        // Determine whether this term reference field is for one of our vocabs.
        // There should not be any multiple-vocabulary fields for a TAC vocab,
        // because the hook_field_update_forbid() implementation prevents it.
        $vocabulary = $field['settings']['allowed_values'][0]['vocabulary'];
        if (in_array($vocabulary, $vocabs)) {
          $instance['vocabulary'] = $vocabulary;
          $instance['cardinality'] = $field['cardinality'];
          $return[$node_type][$field_name] = $instance;
        }
      }
    }
  }
  return $return;
}

/**
 * Determines whether a vocabulary is enabled for any roles.
 */
function tac_alt_ui_vocabulary_is_enabled($vocabulary_name) {
  return in_array($vocabulary_name, tac_alt_ui_get_enabled_vocabs());
}

/**
 * Enables a vocabulary for all roles.
 *
 * @param $vocabulary_name
 *   The machine name of the vocabulary to be enabled.
 */
function tac_alt_ui_enable_vocabulary($vocabulary_name) {
  $vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary_name);
  foreach (user_roles() as $rid => $role) {
    taxonomy_access_enable_vocab($vocabulary->vid, $rid);
  }
  cache_clear_all('tac_alt_ui_enabled', 'cache');
  // Allow other modules to react to the vocabulary being enabled.
  foreach (module_implements('taxonomy_access_enable_vocabulary') as $module) {
    module_invoke($module, 'taxonomy_access_enable_vocabulary', $vocabulary->vid);
  }
}

/**
 * Disables a vocabulary for all roles.
 *
 * @param $vocabulary_name
 *   The machine name of the vocabulary to be disabled.
 */
function tac_alt_ui_disable_vocabulary($vocabulary_name) {
  $vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary_name);
  foreach (user_roles() as $rid => $role) {
    taxonomy_access_disable_vocab($vocabulary->vid, $rid);
  }
  cache_clear_all('tac_alt_ui_enabled', 'cache');
}

/**
 * Returns a list of vocabularies that are TAC-enabled.
 *
 * @return
 *   An array of vocabulary machine names.
 */
function tac_alt_ui_get_enabled_vocabs() {
  return db_query("SELECT DISTINCT tv.machine_name FROM {taxonomy_access_default} tad JOIN {taxonomy_vocabulary} tv ON tad.vid = tv.vid WHERE tad.vid > 0;")->fetchCol();
}
