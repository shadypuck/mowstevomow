<?php

/**
 * Implements hook_menu().
 */
function server_variables_menu() {

  $items['admin/config/system/server-variables'] = array(
      'title' => 'Analytics variables',
      'description' => "Configure analytics variables that can be accessed from JavaScript.",
      'page callback' => 'drupal_get_form',
      'page arguments' => array('server_variables_admin_settings'),
      'access arguments' => array('administer analytics variables'),
      'file' => 'server_variables.admin.inc',
      'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function server_variables_permission() {
  return array(
    'administer analytics variables' => array(
      'title' => t('Administer analytics variables'),
      'restrict access' => TRUE,
    )
  );
}


/**
  * Implement hook_help()
  */
 function server_variables_help($path, $arg) {
   switch ($path) {
     case 'admin/help#server_variables':
       $output = '';
       $output .= '<h3>' . t('About') . '</h3>';
       $output .= '<p>' . t("The Analytics variables module allows administrators to configure analytics variables that can be accessed from JavaScript. Variables are added to the Drupal.settings.server_variables object.") . '<p>';
       return $output;
   }
 }

/**
 * Implements hook_user_insert().
 *
 * Set JavaScript variables on user account creation.
 */
function server_variables_user_insert(&$edit, $account, $category) {
  _server_variables_user_send($account, 'insert');
}

/**
 * Implements hook_user_update().
 *
 * Set Javascript variables on user account update.
 */
function server_variables_user_update(&$edit, $account, $category) {
  _server_variables_user_send($account, 'update');
}

/**
 * Implements hook_user_delete().
 *
 * Set JavaScript variables on user account deletion.
 */
function server_variables_user_delete($account) {
  _server_variables_user_send($account, 'delete');
}

/**
 * Send user-related variables on user account create/update/delete.
 *
 * @param $account account to send data for
 * @param $op the operation to send eg. insert, update, delete
 */
function _server_variables_user_send($account, $op = NULL) {
  if ($account->uid == 1) {
    // never for user 1
    return;
  }
  $vars = array();
  // action op
  if (_server_variables_check('action', 'op')) {
    _server_variables_send($vars, 'action', 'op', $op);
  }
  _server_variables_get_account($vars, 'actuser', $account);
  // Set server variables in session (otherwise lost on redirect)
  if (isset($_SESSION['server_variables']) && is_array($_SESSION['server_variables'])) {
    $_SESSION['server_variables'] += $vars;
  }
  else {
    $_SESSION['server_variables'] = $vars;
  }
}


/**
 * Get variables from an user account object and pack in an array.
 *
 * @param $vars byref array of variable to be set
 * @param $group the group of variable to be got ('user' or 'actuser')
 * @param $account the account object in which to find variables
 */
function _server_variables_get_account(&$vars, $group, $account) {
  // core user variables
  if (_server_variables_check($group, 'mail')) {
    _server_variables_send($vars, $group, 'mail', $account->mail);
  }
  if (_server_variables_check($group, 'uid')) {
    _server_variables_send($vars, $group, 'uid', $account->uid);
  }
  if (_server_variables_check($group, 'name')) {
    _server_variables_send($vars, $group, 'name', $account->name);
  }
  if (_server_variables_check($group, 'roles')) {
    $roles = array_intersect_key(user_roles(), $account->roles); // get strings for roles
    _server_variables_send($vars, $group, 'roles', $roles);
  }
  // custom fields
  foreach (field_info_instances('user', 'user') as $field) {
    $field_name = $field['field_name'];
    if (_server_variables_check($group, $field_name) && _server_variables_field_access_allowed($field, 'user', $account)) {
      $value = field_get_items('user', $account, $field_name);
      $field_info = field_info_field($field_name);
      if (array_key_exists('value', $field_info['columns'])) {
        // we're sure there really is a 'value'
        if ($field_info['cardinality'] == 1) {
          // the field has cardinality 1
          $value_single = (is_array($value) && array_key_exists(0, $value)) ? $value[0]['value'] : NULL;
          _server_variables_send($vars, $group, $field_name, $value_single);
        }
        else {
          // the field has multiple cardinality - make an array
          $value_array = array();
          foreach ($value as $value_element) {
            $value_array[] = $value_element['value'];
          }
          _server_variables_send($vars, $group, $field_name, $value_array);
        }
      }
    }
  }

}


/**
 * Test whether a variable should be sent.
 *
 * @param $group group associated with variable
 * @param $field field associated with variable
 * @return TRUE if variable should be sent
 */
function _server_variables_check($group, $field) {
  return variable_get("server_variables_{$group}_{$field}_ind", FALSE);
}

/**
 * Add variable to an array for sending.
 *
 * @param $array array containing variables
 * @param $group group associated with variable
 * @param $field field associated with variable
 * @param $value the value to be sent
 */
function _server_variables_send(&$array, $group, $field, $value) {
  $var = variable_get("server_variables_{$group}_{$field}_var", NULL);
  if (!empty($var)) {
    $array[$var] = $value;
  }
}

/**
 * Check if this variable was already sent.
 *
 * @param $array array containing variables
 * @param $group group associated with variable
 * @param $field field associated with variable
 */
function _server_variables_is_sent($array, $group, $field) {
  $var = variable_get("server_variables_{$group}_{$field}_var", NULL);
  return (!empty($var)) && isset($array[$var]);
}

/**
 * Determines if field data is allowed to be set as a server variable.
 *
 * Since setting server variables involves printing them in the page's HTML, it
 * is only safe to do this if the current user has access to either view or
 * edit the data stored in the field.
 *
 * @todo: If the fact that these fields are (silently) not set ever confuses
 *   anyone, we could put help text about it on the module's configuration page
 *   and/or provide an explicit setting to allow administrators to bypass it on
 *   their site (if they understand the risks). But it's an edge case, so not
 *   worth cluttering the UI for now.
 *
 * @param $field
 *   The field whose data will be set.
 * @param $entity_type
 *   The type of entity which the field data is attached to (e.g., 'node' or
 *   'user').
 * @param $entity
 *   The entity which the field data is attached to.
 *
 * @return
 *   TRUE if it is safe to set the server variable, or FALSE if not.
 */
function _server_variables_field_access_allowed($field, $entity_type, $entity) {
  return field_access('view', $field, $entity_type, $entity) || field_access('edit', $field, $entity_type, $entity);
}


/**
 * Implements hook_preprocess_html().
 */
function server_variables_preprocess_html(&$variables) {
  $vars = array();
  if (_server_variables_check('site', 'page_title')) {
    _server_variables_send($vars, 'site', 'page_title', $variables['head_title']);
  }
  drupal_add_js(array('server_variables' => $vars), 'setting');
}

/**
 * Implements hook_init().
 *  - set Drupal.settings from session object
 */
function server_variables_init() {
  if (!module_exists('overlay') || overlay_get_mode() != 'child') {
    // ignore if in overlay
    $vars = array();
   // persistent variables
    if (_server_variables_check('site', 'site_name')) {
      _server_variables_send($vars, 'site', 'site_name', variable_get('site_name', ''));
    }
    if (user_is_logged_in()) {
      // be sure user is logged in
      // get variables for currently logged in user
      global $user;
      $account = user_load($user->uid);
      _server_variables_get_account($vars, 'user', $account);
    }

    // If entity actions are to be sent and we did not yet record an action to
    // be sent, record the view action for this piece of content. If there is
    // already an action, it means we have entity data to report (update, insert
    // or delete from a previous request), so do not overwrite that.
    if (($node = menu_get_object()) && arg(2) === NULL && _server_variables_check('action', 'op')) {
      if (empty($_SESSION['server_variables']) || !_server_variables_is_sent($_SESSION['server_variables'], 'action', 'op')) {
        _server_variables_entity_send($node, 'node', 'view');
      }
    }

    drupal_add_js(array('server_variables' => $vars), 'setting');
    if (isset($_SESSION) && is_array($_SESSION)) {
      if (isset($_SESSION['server_variables'])) {
        $vars += $_SESSION['server_variables'];
        unset($_SESSION['server_variables']);
        drupal_add_js(array('server_variables' => $vars), 'setting');
      }
    }
  }
}

/**
 * Implement hook_entity_insert()
 *  - send server variables
 */
function server_variables_entity_insert($entity, $type) {
  if ($type != 'taxonomy_term') {
    // Don't record new tag creation -- this can override the node insert/update.
    // This will however override any 'view' type of action if happening in the
    // same request cycle before the values are output, which is expected.
    _server_variables_entity_send($entity, $type, 'insert');
  }
}

/**
 * Implement hook_entity_update()
 *  - send server variables
 */
function server_variables_entity_update($entity, $type) {
  // This will override any 'view' type of action if happening in the same
  // request cycle before the values are output, which is expected.
  _server_variables_entity_send($entity, $type, 'update');
}

/**
 * Implement hook_entity_delete()
 *  - send server variables
 */
function server_variables_entity_delete($entity, $type) {
  // This will override any 'view' type of action if happening in the same
  // request cycle before the values are output, which is expected.
  _server_variables_entity_send($entity, $type, 'delete');
}

/**
 * Extract and send entity-related variables.
 *
 * @param $entity the entity object that the action is taken on
 * @param $type the entity type
 * @param $op the operation (eg. "view", "insert", "update", "delete")
 */
function _server_variables_entity_send($entity, $type, $op) {
  if (($type == 'user' && $entity->uid == 1) || ($type == 'redirect') || ($type == 'file')) {
    // Never run for user 1 or for redirect entities.
    return;
  }

  $info = entity_get_info($type);
  $vars = array();
  if (_server_variables_check('action', 'op')) {
    _server_variables_send($vars, 'action', 'op', $op);
  }
  if (_server_variables_check('action', 'id')) {
    $id = $info['entity keys']['id'];
    _server_variables_send($vars, 'action', 'id', $entity->$id);
  }
  if (_server_variables_check('action', 'type')) {
    _server_variables_send($vars, 'action', 'type', $type);
  }
  if (_server_variables_check('action', 'subtype')) {
    $entity_type = (property_exists($entity, 'type')) ? $entity->type : NULL;
    _server_variables_send($vars, 'action', 'subtype', $entity_type);
  }
  if (_server_variables_check('action', 'title')) {
    $label = isset($info['entity keys']['label']) ? $info['entity keys']['label'] : NULL;
    $title = (empty($label)) ? '' : $entity->$label;
    _server_variables_send($vars, 'action', 'title', $title);
  }
  if (_server_variables_check('action', 'create_date')) {
    $create_date = (property_exists($entity, 'created')) ? $entity->created : NULL;
    _server_variables_send($vars, 'action', 'create_date', $create_date);
  }
  if (_server_variables_check('action', 'update_date')) {
    $update_date = (property_exists($entity, 'changed')) ? $entity->changed : NULL;
    _server_variables_send($vars, 'action', 'update_date', $update_date);
  }
  if (_server_variables_check('action', 'taxonomy')) {
    $tags = field_get_items($type, $entity, 'field_tags');
    if (is_array($tags)) {
      $field = field_info_field('field_tags');
      if (_server_variables_field_access_allowed($field, $type, $entity)) {
        foreach ($tags as $key => $value) {
          $taxonomy[] = $value['name'];
        }
        _server_variables_send($vars, 'action', 'taxonomy', $taxonomy);
      }
    }
  }
  // store vars on session for later use
  if (isset($_SESSION['server_variables']) && is_array($_SESSION['server_variables'])) {
    $_SESSION['server_variables'] += $vars;
  }
  else {
    $_SESSION['server_variables'] = $vars;
  }
}

/**
 * Implements hook_library().
 */
function server_variables_library() {
  $path = drupal_get_path('module', 'server_variables');
  // Register the debug jQuery plugin as a library.
  $libraries['server_variables.debug'] = array(
    'title' => 'Analytics debug tool',
    'website' => 'http://drupal.org/project/server_variables',
    'version' => '1.0',
    'js' => array(
      $path . '/tests/jquery.client-variable-debug.js' => array('group' => JS_THEME, 'preprocess' => false),
    ),
  );

  return $libraries;
}


/**
 * Implements hook_javascript_libraries_available_alter().
 *
 * Add the debug library to the javascript libraries module's list of
 * configurable libraries.
 */
function server_variables_javascript_libraries_available_alter(&$groups) {
  $groups['Development']['library'][] = 'server_variables.debug';
}
