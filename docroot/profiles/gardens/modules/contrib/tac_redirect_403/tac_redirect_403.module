<?php

/**
 * @file
 * Creates a Link field that can be added to taxonomy terms. When a user visits
 * a node page that is denied by a taxonomy access term containing a URL value
 * for this Link field, the user is redirected to this URL.
 */

/**
 * Implements hook_modulefield_info().
 */
function tac_redirect_403_modulefield_info() {
  return array(
    'tac_redirect_403' => array(
      'field_name' => 'tac_redirect_403',
      'type' => 'link_field',
      'entity_types' => array('taxonomy_term'),
      'settings' => array(
        'title' => 'none',
      ),
      'cardinality' => 1,
      'instance' => array(
        'label' => t('Redirect URL'),
        'description' => t('If a user is denied access to this content, redirect them to the specified URL.'),
        'settings' => array(
          'title' => 'none',
        ),
        'display' => array(
          'default' => array(
            'type' => 'hidden',
          ),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_menu_alter().
 */
function tac_redirect_403_menu_alter(&$items) {
  $items['node/%node']['access callback'] = '_tac_redirect_403_access';
  $items['node/%node']['access arguments'] = array(1);
}

/**
 * Access callback for node/%node.
 *
 * Returns TRUE if the user has access. Otherwise, if there's a taxonomy access
 * term denying access that has a value for the 'tac_redirect_403' field,
 * redirects to that URL. Otherwise, returns FALSE.
 */
function _tac_redirect_403_access($node) {
  global $user;
  $access = node_access('view', $node);

  // When using drush or another CLI tool, redirecting here would be fatal.
  if (drupal_is_cli()) {
    return $access;
  }

  // We only want to intercept with a redirect if there's a taxonomy access term
  // responsible for denial.
  // - TAC doesn't manage unpublished nodes.
  // - If the denial is due to lack of 'access content' permission, that's not
  //   TAC's responsibility.
  // - TAC uses the hook_node_grants() system, so if the denial is due to a
  //   hook_node_access() implementation, that's not TAC's responsibility.
  if (!$access && $node->status && user_access('access content') && !in_array(NODE_ACCESS_DENY, module_invoke_all('node_access', $node, 'view', $user), TRUE)) {
    // Find terms responsible for the denial that specify a redirect URL. If
    // there aren't any, then there's nothing to redirect to.
    if (modulefield_field_exists('tac_redirect_403') && ($tids = _tac_redirect_403_denying_tids($node, $user))) {
      $query = new EntityFieldQuery();
      $result = $query
        ->entityCondition('entity_type', 'taxonomy_term')
        ->propertyCondition('tid', $tids, 'IN')
        ->fieldCondition('tac_redirect_403')
        ->execute();
      if ($tids = array_keys($result['taxonomy_term'])) {
        // Found one or more terms containing one or more redirect URLs. For
        // most simple cases, we'll just have one term with a single-valued
        // field, but in any case, just redirect to the first URL.
        foreach ($tids as $tid) {
          // TaxonomyTermController::buildQuery() adds a 'term_access' query
          // tag for some reason (seems like a bug to force access control on
          // all uses of taxonomy_term_load()). We need to get data out of the
          // term even if it's a term denied to the user. Fortunately, TAC
          // provides a mechanism to suppress its own query alteration.
          $enabled = taxonomy_access_list_enabled();
          taxonomy_access_disable_list();
          $term = taxonomy_term_load($tid);
          if ($enabled) {
            taxonomy_access_enable_list();
          }
          foreach ($term->tac_redirect_403[LANGUAGE_NONE] as $delta => $item) {
            if (!empty($item['url'])) {
              drupal_goto($item['url']);
            }
          }
        }
      }
    }
  }

  return $access;
}

/**
 * Adds this module's field to the requested vocabulary.
 */
function tac_redirect_403_enable_vocabulary($vocabulary_machine_name) {
  if (!field_info_instance('taxonomy_term', 'tac_redirect_403', $vocabulary_machine_name)) {
    modulefield_create_instance('tac_redirect_403', 'taxonomy_term', $vocabulary_machine_name);
  }
}

/**
 * Removes this module's field from the requested vocabulary.
 */
function tac_redirect_403_disable_vocabulary($vocabulary_machine_name) {
  if ($instance = field_info_instance('taxonomy_term', 'tac_redirect_403', $vocabulary_machine_name)) {
    field_delete_instance($instance);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * To reduce clutter, removes the meaningless option of adding this module's
 * field to a vocabulary that can't be used to deny node access.
 */
function tac_redirect_403_form_field_ui_field_overview_form_alter(&$form, &$form_state) {
  if ($form['#entity_type'] == 'taxonomy_term'
    && isset($form['fields']['_add_existing_field']['field_name']['#options']['tac_redirect_403'])
    && !_tac_redirect_403_vocabulary_can_deny($form['#bundle'])
  ) {
    unset($form['fields']['_add_existing_field']['field_name']['#options']['tac_redirect_403']);
  }
}

/**
 * Returns the node's term ids responsible for denying access for the user.
 *
 * @todo The implementation requires calling a TAC private function to generate
 *   the needed query, making it sensitive to future breakage. This entire
 *   helper function might make for a good public API function to add to TAC.
 */
function _tac_redirect_403_denying_tids($node, $account) {
  $tids = array();

  // Start with a term grant query. It sets up the BIT_OR expression, but
  // leaves it up to the caller to specify the groupBy.
  $query = _taxonomy_access_grant_query(array('view'));

  // Join the {taxonomy_index} table so that we can filter to just terms for
  // this node.
  $query->join('taxonomy_index', 'ti', 'td.tid = ti.tid');

  // Get a record for each term, aggregating across all of the user's roles.
  $query->fields('td', array('tid'))
    ->groupBy('td.tid')
    ->condition('ti.nid', $node->nid)
    ->condition('tadg.rid', array_keys($account->roles), 'IN')
  ;

  // Each record is the aggregate (BIT_OR) grant for the term across the user's
  // roles. A value of 2 (binary 10) indicates a Deny record for at least one
  // role and no Allow records for any role.
  foreach ($query->execute() as $record) {
    if ($record->grant_view == 2) {
      $tids[] = $record->tid;
    }
  }

  return $tids;
}

/**
 * Returns TRUE if any terms within the passed in vocabulary can be used to deny node access.
 */
function _tac_redirect_403_vocabulary_can_deny($vocabulary_machine_name) {
  $vid = db_query('SELECT vid FROM {taxonomy_vocabulary} WHERE machine_name = :machine_name', array(
    ':machine_name' => $vocabulary_machine_name,
  ))->fetchField();
  if (!$vid) {
    return;
  }

  $vocab_deny = (bool) db_query_range('SELECT 1 FROM {taxonomy_access_default} WHERE vid IN (:vids) AND grant_view = :grant_view', 0, 1, array(
    ':vids' => array($vid, TAXONOMY_ACCESS_GLOBAL_DEFAULT),
    ':grant_view' => 2,
  ))->fetchField();
  if ($vocab_deny) {
    return TRUE;
  }

  $term_deny = (bool) db_query_range('SELECT 1 FROM {taxonomy_access_term} ta INNER JOIN {taxonomy_term_data} td ON ta.tid = td.tid WHERE td.vid = :vid AND ta.grant_view = :grant_view', 0, 1, array(
    ':vid' => $vid,
    ':grant_view' => 2,
  ))->fetchField();
  return $term_deny;
}
